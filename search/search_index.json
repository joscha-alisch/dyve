{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dyve Dyve is a vendor-agnostic unified interface for all your platforms, CI and monitoring tools. In its basic form, Dyve allows platform operators to bundle their used tools into one solution, providing a great developer experience to their teams. Dyve is fully extensible for more complex use-cases or tools that are not yet supported out of the box. Concept The following illustrates the high-level architecture of dyve. The core and frontend application are the main building blocks of dyve. The core application fetches data from many different platforms and tools by using domain specific provider apps. Demo Run the demo to evaluate dyve. Install See this page for available installation methods.","title":"Overview"},{"location":"#dyve","text":"Dyve is a vendor-agnostic unified interface for all your platforms, CI and monitoring tools. In its basic form, Dyve allows platform operators to bundle their used tools into one solution, providing a great developer experience to their teams. Dyve is fully extensible for more complex use-cases or tools that are not yet supported out of the box.","title":"Dyve"},{"location":"#concept","text":"The following illustrates the high-level architecture of dyve. The core and frontend application are the main building blocks of dyve. The core application fetches data from many different platforms and tools by using domain specific provider apps.","title":"Concept"},{"location":"#demo","text":"Run the demo to evaluate dyve.","title":"Demo"},{"location":"#install","text":"See this page for available installation methods.","title":"Install"},{"location":"configure/","text":"","title":"Index"},{"location":"extend/","text":"","title":"Index"},{"location":"install/","text":"Install The following installation methods are currently supported: Helm (recommended) Install dyve into your kubernetes cluster via helm. Demo Run dyve with a demo provider via docker-compose setup for quick evaluation, Docker Run docker images directly. Binaries Run OS-specific binaries directly.","title":"Install"},{"location":"install/#install","text":"The following installation methods are currently supported:","title":"Install"},{"location":"install/#helm-recommended","text":"Install dyve into your kubernetes cluster via helm.","title":"Helm (recommended)"},{"location":"install/#demo","text":"Run dyve with a demo provider via docker-compose setup for quick evaluation,","title":"Demo"},{"location":"install/#docker","text":"Run docker images directly.","title":"Docker"},{"location":"install/#binaries","text":"Run OS-specific binaries directly.","title":"Binaries"},{"location":"install/binaries/","text":"Binaries The releases with binaries attached can be found here . We provide binaries for the following Operating systems / architectures: linux 32-bit linux 64-bit linux arm64 macOS 64-bit macOS arm64 windows 32-bit windows 64-bit","title":"Binaries"},{"location":"install/binaries/#binaries","text":"The releases with binaries attached can be found here . We provide binaries for the following Operating systems / architectures: linux 32-bit linux 64-bit linux arm64 macOS 64-bit macOS arm64 windows 32-bit windows 64-bit","title":"Binaries"},{"location":"install/docker/","text":"Docker If you can't use the installation method via helm , you can also directly use the docker images. They are available at: dyve-core : ghcr.io/joscha-alisch/dyve-core:latest dyve-frontend : ghcr.io/joscha-alisch/dyve-frontend:latest The full list of images, together with available tags can be found here.","title":"Docker"},{"location":"install/docker/#docker","text":"If you can't use the installation method via helm , you can also directly use the docker images. They are available at: dyve-core : ghcr.io/joscha-alisch/dyve-core:latest dyve-frontend : ghcr.io/joscha-alisch/dyve-frontend:latest The full list of images, together with available tags can be found here.","title":"Docker"},{"location":"install/helm/","text":"Helm We provide a helm chart to deploy dyve into your kubernetes cluster. Install Helm In order to use the helm chart, you will need helm installed and configured to use your kubernetes cluster. You can find the instructions here. With helm installed, add the repository: helm repo add dyve https://joscha-alisch.github.io/dyve helm repo update and install the chart: helm upgrade --install -n dyve dyve dyve/dyve Configuration In order to set configuration parameters, create a values.yaml and specify it when installing the chart: helm upgrade --install -f values.yaml -n dyve dyve dyve/dyve The following shows the available options together with its default values: values.yaml core : image : repository : ghcr.io/joscha-alisch/dyve-core tag : main pullPolicy : Always args : - \"--config\" - \"/app/config.yaml\" config : port : 8080 database : uri : mongodb://dyve-mongodb:27017 name : core frontend : image : repository : ghcr.io/joscha-alisch/dyve-frontend tag : main pullPolicy : Always ingress : enabled : false providers : cloudfoundry : enabled : false image : repository : ghcr.io/joscha-alisch/dyve-provider-cf tag : main pullPolicy : Always config : port : 8080 cloudfoundry : api : \"\" user : \"\" password : \"\" database : uri : mongodb://dyve-mongodb:27017 name : provider_cf mongodb : enabled : true auth : enabled : false","title":"Helm"},{"location":"install/helm/#helm","text":"We provide a helm chart to deploy dyve into your kubernetes cluster. Install Helm In order to use the helm chart, you will need helm installed and configured to use your kubernetes cluster. You can find the instructions here. With helm installed, add the repository: helm repo add dyve https://joscha-alisch.github.io/dyve helm repo update and install the chart: helm upgrade --install -n dyve dyve dyve/dyve","title":"Helm"},{"location":"install/helm/#configuration","text":"In order to set configuration parameters, create a values.yaml and specify it when installing the chart: helm upgrade --install -f values.yaml -n dyve dyve dyve/dyve The following shows the available options together with its default values: values.yaml core : image : repository : ghcr.io/joscha-alisch/dyve-core tag : main pullPolicy : Always args : - \"--config\" - \"/app/config.yaml\" config : port : 8080 database : uri : mongodb://dyve-mongodb:27017 name : core frontend : image : repository : ghcr.io/joscha-alisch/dyve-frontend tag : main pullPolicy : Always ingress : enabled : false providers : cloudfoundry : enabled : false image : repository : ghcr.io/joscha-alisch/dyve-provider-cf tag : main pullPolicy : Always config : port : 8080 cloudfoundry : api : \"\" user : \"\" password : \"\" database : uri : mongodb://dyve-mongodb:27017 name : provider_cf mongodb : enabled : true auth : enabled : false","title":"Configuration"},{"location":"install/demo/","text":"Demo To run the demo, you need docker and docker-compose installed on your machine. Copy the files core.yaml docker-compose.yaml from below to your machine and run docker-compose up in the same directory. Open http://localhost:8080 , to see dyve in action! core.yaml providers : - id : demo name : Demo host : http://demo:9003 features : - apps - pipelines - routing - instances auth : secret : secret database : uri : mongodb://mongo:27017 externalUrl : http://localhost:9001/ devConfig : useFakeOauth2 : false docker-compose.yaml version : \"3\" services : mongo : image : mongo restart : always networks : - shared ui : image : ghcr.io/joscha-alisch/dyve-frontend:next restart : always environment : DYVE_API_BACKEND : \"core:9000\" ports : - \"8080:80\" networks : - shared core : image : ghcr.io/joscha-alisch/dyve-core:next restart : always environment : DYVE_DEVCONFIG_USEFAKEOAUTH2 : \"true\" DYVE_AUTH_SECRET : secret DYVE_DATABASE_URI : mongodb://mongo:27017 DYVE_EXTERNALURL : http://localhost:8080 ports : - \"8000:8000\" networks : - shared volumes : - ./core.yaml:/app/config.yaml demo : image : ghcr.io/joscha-alisch/dyve-provider-demo:next restart : always networks : - shared networks : shared : driver : bridge","title":"Demo"},{"location":"install/demo/#demo","text":"To run the demo, you need docker and docker-compose installed on your machine. Copy the files core.yaml docker-compose.yaml from below to your machine and run docker-compose up in the same directory. Open http://localhost:8080 , to see dyve in action! core.yaml providers : - id : demo name : Demo host : http://demo:9003 features : - apps - pipelines - routing - instances auth : secret : secret database : uri : mongodb://mongo:27017 externalUrl : http://localhost:9001/ devConfig : useFakeOauth2 : false docker-compose.yaml version : \"3\" services : mongo : image : mongo restart : always networks : - shared ui : image : ghcr.io/joscha-alisch/dyve-frontend:next restart : always environment : DYVE_API_BACKEND : \"core:9000\" ports : - \"8080:80\" networks : - shared core : image : ghcr.io/joscha-alisch/dyve-core:next restart : always environment : DYVE_DEVCONFIG_USEFAKEOAUTH2 : \"true\" DYVE_AUTH_SECRET : secret DYVE_DATABASE_URI : mongodb://mongo:27017 DYVE_EXTERNALURL : http://localhost:8080 ports : - \"8000:8000\" networks : - shared volumes : - ./core.yaml:/app/config.yaml demo : image : ghcr.io/joscha-alisch/dyve-provider-demo:next restart : always networks : - shared networks : shared : driver : bridge","title":"Demo"},{"location":"providers/","text":"","title":"Index"},{"location":"providers/auth/github/","text":"","title":"GitHub"},{"location":"providers/ci/concourse/","text":"Concourse Provider This provider retrieves pipelines and history from a Concourse installation. In Development This provider is currently still in development and not ready to use yet.","title":"Concourse"},{"location":"providers/ci/concourse/#concourse-provider","text":"This provider retrieves pipelines and history from a Concourse installation. In Development This provider is currently still in development and not ready to use yet.","title":"Concourse Provider"},{"location":"providers/monitoring/","text":"","title":"Index"},{"location":"providers/platform/cloudfoundry/","text":"CloudFoundry Provider This provider retrieves apps from a CloudFoundry installation. Run With Helm The CloudFoundry provider is part of our helm chart. Set providers.cloudfoundry.enabled to true in order to enable it. Also fill in providers.cloudfoundry.config to configure it with your CF Access. The minimal necessary config is as follows: providers : cloudfoundry : enabled : true config : cloudfoundry : api : \"https://your_cloudfoundry_api\" user : \"username\" password : \"password\" database : uri : mongodb://your_mongodb_server:27017 For a full list of configuration parameters, see below. With Docker Image Run the latest docker image with a mounted configuration file. docker run -it --rm -v $( pwd ) /my_config.yaml:/app/config.yaml ghcr.io/joscha-alisch/dyve-provider-cf:latest For a full list of configuration parameters, see below. As Binary Download the latest binary for your OS from the GitHub releases . Then run it, providing a configuration yaml file via -c : dyve-provider-cf -c config.yaml For a full list of configuration parameters, see below. Config The CloudFoundry provider is configured via a yaml file with the following parameters and defaults: port : 9000 # The port to listen on logLevel : info # The log level (debug, info, warn, error) cloudfoundry : api : \"\" # The CloudFoundry API URL user : \"\" # The User to authenticate with password : \"\" # The password for the user reconciliation : cacheSeconds : 20 # For how many to cache apps/spaces/orgs, before retrieving them again via the CF API database : uri : mongodb://localhost:27017 # The MongoDB URL used for caching name : cf # The MongoDB database name","title":"CloudFoundry"},{"location":"providers/platform/cloudfoundry/#cloudfoundry-provider","text":"This provider retrieves apps from a CloudFoundry installation.","title":"CloudFoundry Provider"},{"location":"providers/platform/cloudfoundry/#run","text":"","title":"Run"},{"location":"providers/platform/cloudfoundry/#with-helm","text":"The CloudFoundry provider is part of our helm chart. Set providers.cloudfoundry.enabled to true in order to enable it. Also fill in providers.cloudfoundry.config to configure it with your CF Access. The minimal necessary config is as follows: providers : cloudfoundry : enabled : true config : cloudfoundry : api : \"https://your_cloudfoundry_api\" user : \"username\" password : \"password\" database : uri : mongodb://your_mongodb_server:27017 For a full list of configuration parameters, see below.","title":"With Helm"},{"location":"providers/platform/cloudfoundry/#with-docker-image","text":"Run the latest docker image with a mounted configuration file. docker run -it --rm -v $( pwd ) /my_config.yaml:/app/config.yaml ghcr.io/joscha-alisch/dyve-provider-cf:latest For a full list of configuration parameters, see below.","title":"With Docker Image"},{"location":"providers/platform/cloudfoundry/#as-binary","text":"Download the latest binary for your OS from the GitHub releases . Then run it, providing a configuration yaml file via -c : dyve-provider-cf -c config.yaml For a full list of configuration parameters, see below.","title":"As Binary"},{"location":"providers/platform/cloudfoundry/#config","text":"The CloudFoundry provider is configured via a yaml file with the following parameters and defaults: port : 9000 # The port to listen on logLevel : info # The log level (debug, info, warn, error) cloudfoundry : api : \"\" # The CloudFoundry API URL user : \"\" # The User to authenticate with password : \"\" # The password for the user reconciliation : cacheSeconds : 20 # For how many to cache apps/spaces/orgs, before retrieving them again via the CF API database : uri : mongodb://localhost:27017 # The MongoDB URL used for caching name : cf # The MongoDB database name","title":"Config"}]}